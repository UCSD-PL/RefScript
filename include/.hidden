/*************************************************************************
 *
 *      DOM API
 *
 ************************************************************************/
/*** Function ************************************************************/
/*@ measure numeric_nan               :: number */
/*@ measure numeric_max_value         :: number */
/*@ measure numeric_min_value         :: number */
/*@ measure numeric_negative_infinity :: number */
/*@ measure numeric_positive_infinity :: number */
/// <reference path="../rsc/mutability.ts"/>
/*  builtin_BIBracketRef :: <M,A>(x: Array<M,A>, n: number + undefined) => A + undefined */
/*  builtin_BIBracketRef :: <M,A>(x: Array<M,A>, n: undefined) => undefined */
/*  builtin_BIBracketRef :: <A>  (o: [Immutable] {[y: string]: A }, x: string) => { A | has Property(x,o) } + { undefined | not (hasProperty(x,o)) } */
/// <reference path="./rsc/prims.ts"/>
/// <reference path="./rsc/mutability.ts"/>
/// <reference path="./rsc/aliases.ts"/>
/// <reference path="./ambient/object.ts"/>
/// <reference path="./ambient/array.ts"/>
/// <reference path="./ambient/boolean.ts"/>
/// <reference path="./ambient/function.ts"/>
/// <reference path="./ambient/string.ts"/>
/// <reference path="./ambient/number.ts"/>
/// <reference path="./ambient/iarguments.ts"/>
/// <reference path="./ambient/regexp.ts"/>
/**
 * 	hasProperty: this property is true if the first string argument is a
 * 	property of the object referenced in the second, INCLUDING prototype traversal.
 *
 *  hasDirectProperty: this property is true if the first string argument is a
 *  properyty of the object referenced in the second, NOT INCLUDING prototype
 *  traversal.
 */
/*@ qualif Bot(v:a): 0 = 1 */
/*@ qualif Bot(v:obj): 0 = 1 */
/*@ qualif Bot(v:boolean): 0 = 1 */
/*@ qualif Bot(v:int): 0 = 1 */
/*@ qualif CmpZ(v:int): v < 0 */
/*@ qualif CmpZ(v:int): v <= 0 */
/*@ qualif CmpZ(v:int): v >  0 */
/*@ qualif CmpZ(v:int): v >= 0 */
/*@ qualif CmpZ(v:int): v =  0 */
/*@ qualif CmpZ(v:int): v != 0 */
/*@ qualif Cmp(v:int,x:int): v <  x */
/*@ qualif Cmp(v:int,x:int): v <= x */
/*@ qualif Cmp(v:int,x:int): v >  x */
/*@ qualif Cmp(v:int,x:int): v >= x */
