
GRAMMAR
=======

P   ::= Ci s                                  (Program)

C   ::= class A<Vi> extends A'<ti> { Md; Fd } (Class declarations)

N   ::=                                       (Named Types)
      | class A<Vi> extends A'<ti> { Md; Fd }   (class definitions)
      | interface I<Vi> extends Ii<ti>          (interface)
      | enum { fi }                             (enumeration)


I   ::=                                       (Interface)
      | interface I<Vi> { Md; Fd }              (interface definitions)


s   ::=                                       (Statements)
      | s; s                                    (sequence)
      | fun f(xi):ς { s }                     (function decalration)
      | var x[: t] = e                          (variable definition)
      | x := e                                  (assignment)
      | e.f := e                                (static field update)
      | e[e] := e                               (dynamic field update)
      | return [e]                              (return)
      | while(e) { s }                          (while loop)
      | if(e) { s1 } else { s2 }                (if-then-else)


e   ::=                                       (Expressions)
      | 1 | 2 | ...                             (numeric literal)
      | "a" | ...                               (string literal)
      | true | false                            (boolean literal)
      | op1 e                                   (unary operation) 
      | e op2 e                                 (binary operation)
      | { FD; MD }                              (object literal)
      | new C(ei)                               (class constructor)
      | [ei]                                    (array literal)
      | e.m(ei)                                 (method call)
      | f(ei)                                   (function call)
      | e.f                                     (static field access)
      | e1[e1]                                  (dynamic field access)

-- Only in target language 
      | c e                                     (cast)


MD  ::=                                       (Callable class elements)
      | mod m(xi): sig { s }                    (method)
      | new (xi): sig { s }                     (constructor)


mod ::=                                       (Access modifier)
      | public 
      | private
      

FD  ::= f: e
      | F; F


-------------------------------------------------------------------------------

t   ::=        | { v: b | p }                            (refined type)


p   ::= ...                                   (Predicates)


b   ::=                                       (Base types)
      | number | string | boolean               (primitive)
      | null                                    (null)
      | V                                       (type variable)
      | N[ti]                                   (Type reference)
      | { Fd; Md }                              (object type)
      | [t]                                     (array type)
      | t1 \/ t2                                (union type)
      | top                                     (top)


sig ::=                                       (Type signature)
      | (xi:ti)=>t                              (arrow type)
      | ∀V.sig                                  (quantified type)    


ς   ::=                                       (Function specification)
      | sig                                     (function signature)
      | ς1 /\ ς2                                (signature intersection)


Fd  ::= f: (Mi,t)                             (Field declaration)
      | Fd, Fd


Md  ::= m: ς                                  (Method declarations)
      | Md, Md


Mi  ::=                                       (Field mutability modifier) 
      | mut                                     (mutable)
      | imm                                     (immutable)


c   ::=                                       (Casts)
      | .                                       (no cast - or upcast ?)
      | [ t \/ ts => ts ]                       (downcast)



-------------------------------------------------------------------------------

G   ::=                                       (Typing environment)


S   ::=                                       (Class environment)




NOTES:

  1. Function types are considered object types with a single field called
     "call".




Coercive subtyping
==================

 __________________
|                  |
|   t1 <: t2 ~> c  |         Subtyping jugdement
|__________________|


    t <: t ~> .                                  [S-Id]


    t <: top ~> .                                [S-top]


    -------------------------------------------- [S-Union-Up]
    t <: t\/ti ~> .


    
    -------------------------------------------- [S-Union-Down]
    t\/ti <: ti ~> [ t\/ti => ti ]


    ti' <: ti ~> .
    t <: t' ~> .
    -------------------------------------------- [S-Func]
    (xi:ti)=>t <: (xi:ti')=>t' ~> .


    t1 <: t2 ~> .          t2 <: t1 ~> .
    -------------------------------------------- [S-Array]
    [t1] <: [t2]


    t1 <: t2 ~> .          t2 <: t1 ~> .
    -------------------------------------------- [S-Interface]
    I[t1] <: I[t2]



    f: M,t <: f: M',t'
    -------------------------------------------- [S-Struct]
    { f: (M,t), Fd } <: { f: M',t'; Fd } ~> .


    S(B) = class B extends B' { Md'; Fd' }
    {Md''; Fd''} = unfold(B') 
    {Md; Fd} <: { Md', Md''; Fd', Fd''}
    -------------------------------------------- [S-Class-1]
    { Md; Fd } <: class B extends B' ~> .


    S(B) = class B extends B' { Md'; Fd' }
    {Md''; Fd''} = unfold(B') 
    { Md', Md''; Fd', Fd''} <: {Md; Fd}
    -------------------------------------------- [S-Class-2]
    class B extends B' <: {Md; Fd}~> .


 ______________
|              |
|   Fd <: Fd'  |         Field subtyping jugdement
|______________|


    t <: t' ~> .      t' <: t ~> .
    -------------------------------------------- [S-Fld-Deep-1]
    f: (_,t) <: f: (mut,t')


    t <: t' ~> .
    -------------------------------------------- [S-Fld-Deep-1]
    f: (imm,t) <: f: (_,t')


 ______________
|              |
|   Md <: Md'  |         method subtyping jugdement
|______________|


    t <: t' ~> .      t' <: t ~> .
    -------------------------------------------- [S-Fld-Deep-1]
    m: (_,t) <: f: (mut,t')


    t <: t' ~> .
    -------------------------------------------- [S-Fld-Deep-1]
    f: (imm,t) <: f: (_,t')





NOTES:

* [S-interface] This needs to be invariant Unless we dig deep into I and prove
that wherever the As of I[A] appear, the mutability modifier is `im`.

* Upcasts are treated as "no-coercion". We might need to make that more 
explicit.




 ______________________
|                      |
|   G |- s ~> s', G'   |         Raw Statement Typing Jugdement
|______________________|

    
    G  |- s1 ~> s1', G'
    G' |- s2 ~> s2', G''
    ------------------------------------------------- [S-Seq]
    G  |- s1; s2 ~> s1'; s2', G''


    ft = LUB(sig_i)
    G  |- fun f(xi):ft { s } ~> fun f(xi): ft { s' }, G'
    ------------------------------------------------------------------- [S-Func]
    G  |- fun f(xi):/\ sig_i { s } ~> fun f(xi): /\ sig_i { s' }, G'


    G |-* e : t' ~> c
    x not in dom(G)
    G' = G[x -> t]
    ------------------------------------------------- [S-Field-DM]
    G |- var x: t = e ~> var x: t = e', G'


    G(x) = t
    G |- e : t' -> e'
    t' <: t ~> c
    ------------------------------------------------- [S-Asgn]
    G |- x := e ~> x = c e', G


    G |- ei : t1 -> ei'
    t1 = { f: (mut,t); _ } 
    t2 <: t ~> c
    ------------------------------------------------- [S-Upd]
    G |- e1.f := e2 ~> e1'.f := c e2', G


    TODO
    ------------------------------------------------- [S-DUpd]
    G |- e1[e2] := e3 ~> ..., G'



    G(return) = t
    G |- e: t' ~> e'
    t' <: t ~> c
    ------------------------------------------------- [S-Ret]
    G |- return e ~> return c e', .


    G |- s ~> s', G'
    G |- e: _ ~> e'
    ------------------------------------------------------------- [S-If]
    G |- while(e) {s} ~> while(e'){s'}, G


    G |- si ~> si', Gi
    G |- e: _ ~> e'
    ------------------------------------------------------------- [S-If]
    G |- if(e) {s1} else {s2} ~> if(e') {s1'} else {s2'}, G


NOTES:

* Scoping: how do we scope function declarations [S-Func]

* Object declaration typing: make a special typing judgement

* Define LUB

* The bindings in the the two branches of if-statements or the block of the
while statement shall not escape the scope.





 _________________________
|                         |
|   G; S |- e : t ~> e'   |     Raw Expression Typing Jugdement
|_________________________|


NOTES: Union types are never inferred.




 ______________________
|                      |
|   G; S |- s ~> G'    |     Liquid Statement Typing Jugdement
|______________________|



 _____________________________
|                             |
|   G; S |- e : t ~> G', v    |     Liquid Statement Typing Jugdement
|_____________________________|



    t\p <: t\False
    ti\pi <: ti\qi
    ------------------------------------------------- [L-Cast]
    G; S |- [ t\p \/ ti\pi => ti\pi ] e ~> G', v 
